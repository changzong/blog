---
layout: post
title:  "NodeJS与Java作为后端语言的优缺点比较"
date:   2016-02-01 08:58:00
categories: jekyll update
---

最近喜欢上了NodeJS，原因很简单，我是JavaScript的忠实粉丝，在经历的客户端JS的一次次项目和各种教训后，能看到它在服务端大放异彩我很兴奋。当然我知道实事情况并没有那么简单，Java的地位还是牢牢占据着顶峰，但node在这种越来越流行的环境下，一定有其特点是Java做不到，或者不方便的。看了几篇网页大牛们的分析，我在这里先总结一部分来梳理下思路。

* 对资源的利用：

Java在工业生产领域的大范围应用已经证明了它对于大量CPU计算资源和内存资源的利用率肯定是非常高的。Node却恰恰缺乏这种特点，唯一的解决办法似乎是开多个nodejs实例，但是这进一步产生了其他问题。

* 语言纠错能力：

Java作为一种强类型语言，非常适用于团队协作，其在编译之前会对语法和类型进行纠错，从而在debug时节省了大量时间。而node因为JavaScript本身的特点，不能再运行之前进行语法查错，但是JS语言的灵活性也是其他不能比的。

* 适用场景：

有人说JavaScript要一统江湖了，其实并不然，在一个大型的拥有多个模块的系统里，不同的语言有其自己更适合的应用场景。比如在更后端的业务模块的编写和功能的实现上，Java就更加适用。而在偏前端的数据与界面的映射处理上，node又更加快速适合。在做数据分析和算法实现的时候，Python就更加强大。这样不同的模块通过消息服务连接起来形成一个复杂完整的系统使得整个系统更加健全。

* 语言本身特点：

Java是经过大量工业领域验证过的开发语言，具有标准化和容错能力强的特点。而JavaScript语言非常灵活，正因为此，它本身也有很多陷阱缺陷。

* 环境搭建：

Java的环境和依赖的搭建需要手工管理，而node只需要使用npm命令即可快速下载并维护依赖。

* 异步化问题：
Java本身设计是同步的，没有await支持，通常是一个请求开启一个线程，或者设定一个线程池，在池中逐个执行。所以总会有线程因IO或其他原因处于sleep状态，这样实现单服务器高并发就比较困难。JavaScript的设计是完全异步化的，这样虽然方便处理高并发问题，但是调试比较困难，异步的循环是用回调函数执行的，会产生栈溢出或者无法找出出错点的问题。

* 还是高并发的问题：
对于高并，海量连接的场景如聊天服务，服务器要采用异步非阻塞模式，并在整个执行过程中都尽量这样，而非只是在I/O。node因JS天生的异步基因被人们用于大并发项目，并且人们乐于忍受其他缺点。

以下对Java和node的并发执行流程图来自于 [OurJS][ourjs]

![javathreading](http://7xoylk.com1.z0.glb.clouddn.com/threading_java.png)

![nodethreading](http://7xoylk.com1.z0.glb.clouddn.com/threading_node.png)

[ourjs]: http://ourjs.com/detail/5373fba83f2b941e03000008
